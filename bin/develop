#!/usr/bin/env node

let app = require('../app').app;
let debug = require('debug')('inhouse-api:httpServer');
let http = require('http');
const start = require('../module/start');
let graphql  = require('../graphql/index');


(async ()=>{
    start.start();

    let port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);


    let httpServer = http.createServer(app);
    await graphql.run(app, httpServer)

    httpServer.listen(port, () => {});
    httpServer.on('error', onError);
    httpServer.on('listening', onListening);

    module.exports = httpServer;

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP httpServer "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }
    /**
     * Event listener for HTTP httpServer "listening" event.
     */

    function onListening() {
        var addr = httpServer.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }


})()

