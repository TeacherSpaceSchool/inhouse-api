#!/usr/bin/env node
const cluster = require('cluster');
const os = require('os');
let app = require('../app').app;
let debug = require('debug')('inhouse-api:httpServer');
let http = require('http');
const start = require('../module/start');
let graphql  = require('../graphql/index');

(async ()=>{
    if (cluster.isMaster) {
        start.start();
        let cpuCount = os.cpus().length
        for (let i = 0; i < cpuCount; i += 1) {
            cluster.fork();
            console.log('cluster '+i+' run')
        }
    }
    else {

        const normalizePort = (val) => {
            let port = parseInt(val, 10);
            if (isNaN(port))
                return val;
            if (port >= 0)
                return port;
            return false;
        }

        let port = normalizePort(process.env.URL.trim()!=='http://localhost'?'4000':'3000');
        app.set('port', port);

        let httpServer = http.createServer(app);
        await graphql.run(app, httpServer)

        const onError = (error) => {
            if (error.syscall !== 'listen')
                throw error;
            let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
            switch (error.code) {
                case 'EACCES':
                    console.error(bind + ' requires elevated privileges');
                    process.exit(1);
                    break;
                case 'EADDRINUSE':
                    console.error(bind + ' is already in use');
                    process.exit(1);
                    break;
                default:
                    throw error;
            }
        }
        const onListening = () => {
            let addr = httpServer.address();
            let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
            debug('Listening on ' + bind);
        }

        httpServer.listen(port);
        httpServer.on('error', onError);
        httpServer.on('listening', onListening);

        module.exports = httpServer;


    }
})()

